{"version":3,"sources":["App.js","index.js"],"names":["App","useState","text","setText","wordCount","setwordCount","excludeSpace","setExcludeSpace","characters","setCharacters","sentence","setSentence","className","value","onChange","e","words","target","wordArr","split","counter","replaceAll","length","w","filter","word","sentenceCount","match","console","log","rows","cols","placeholder","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMA4DeA,MAvDf,WACE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAkCF,mBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAwCJ,mBAAS,GAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KACA,EAAoCN,mBAAS,GAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KACA,EAAgCR,mBAAS,GAAzC,mBAAOS,EAAP,KAAiBC,EAAjB,KAgCA,OACE,sBAAKC,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,4CACA,yCAAYR,KAEZ,6CAAgBI,KAChB,+DAAkCF,KAClC,4CAAeI,QAEjB,sBAAKE,UAAU,YAAf,UACE,0BAAUC,MAAOX,EAAMY,SAzCR,SAACC,GACpB,IAAMC,EAAQD,EAAEE,OAAOJ,MACvBV,EAAQa,GACR,IAH0B,EAGpBE,EAAUF,EAAMG,MAAM,QACxBC,EAAU,EAJY,cAKZF,GALY,IAK1B,2BAAuB,CACX,KADW,SACPE,KANU,8BAQ1Bf,EAAae,GACbb,EAAgBS,EAAMK,WAAW,MAAO,IAAIC,QAC5Cb,EAAcO,EAAMM,QACpB,IAAIC,EAAIP,EAAMG,MAAM,IAAIK,QAAO,SAAAC,GAAI,OAAIA,EAAKJ,WAAW,KAAM,OAC7DZ,EAAcc,EAAED,QAChB,IAAMI,EAAgBV,EAAMW,MAAM,kBAClCC,QAAQC,IAAIH,GAEVf,EADoB,OAAlBe,EACUA,EAAcJ,OAEd,IAuBqCQ,KAAK,KAAKC,KAAK,KAAKC,YAAY,aAAapB,UAAU,SACtG,wBAAQA,UAAU,eAAeqB,QAnBnB,WAClB9B,EAAQ,IACRE,EAAa,GACbE,EAAgB,GAChBI,EAAY,IAeR,0BCjDRuB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a5d1980a.chunk.js","sourcesContent":["import { useState } from \"react\";\n// const fs = require('fs');\n// const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n// const { IamAuthenticator } = require('ibm-watson/auth');\n\nfunction App() {\n  const [text, setText] = useState(\"\")\n  const [wordCount, setwordCount] = useState(0)\n  const [excludeSpace, setExcludeSpace] = useState(0)\n  const [characters, setCharacters] = useState(0)\n  const [sentence, setSentence] = useState(0)\n  // const [paragraph, setParagraph] = useState(0)\n  const handleChange = (e) => {\n    const words = e.target.value\n    setText(words)\n    const wordArr = words.split(/\\s+/g)\n    let counter = 0\n    for (let i of wordArr) {\n      if (i !== \"\") counter++\n    }\n    setwordCount(counter)\n    setExcludeSpace(words.replaceAll(/\\s/g, '').length)\n    setCharacters(words.length)\n    let w = words.split(\"\").filter(word => word.replaceAll(\"\\n\", \"\"))\n    setCharacters(w.length)\n    const sentenceCount = words.match(/\\w[.?!](\\s|$)/g)\n    console.log(sentenceCount)\n    if (sentenceCount !== null){\n      setSentence(sentenceCount.length)\n    }else{\n      setSentence(0)\n    }\n  }\n\n\n  const handleReset = () => {\n    setText(\"\")\n    setwordCount(0)\n    setExcludeSpace(0)\n    setSentence(0)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Word Count</h1>\n        <h2>Words: {wordCount}</h2>\n        {/* <h2>Paragraph Count: {paragraph}</h2> */}\n        <h2>Characters:{characters}</h2>\n        <h2>Characters excluding spaces: {excludeSpace}</h2>\n        <h2>Sentence: {sentence}</h2>\n      </header>\n      <div className=\"container\">\n        <textarea value={text} onChange={handleChange} rows=\"10\" cols=\"30\" placeholder=\"Start here\" className=\"text\"></textarea>\n        <button className=\"reset-button\" onClick={handleReset}>reset</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}